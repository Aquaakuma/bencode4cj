package bencode4cj.tests

import bencode4cj.services.*
import std.collection.*
import std.unittest.*
import std.unittest.testmacro.*
import encoding.json.*

/* ===== Emitted by MacroCall @Test in bencode_decoder_test.cj:9:1 ===== */
/* 9.1 */@Attribute[TEST_GENERATED] class TestBencodeDecoderInteger <: TestClass {
/* 9.2 */    @Attribute[TestCase_6]
/* 9.3 */    public func testDecodeValidInteger(): Unit {
/* 9.4 */        let decoder = BencodeDecoder("i123e".toArray())
/* 9.5 */        let result = decoder.decodeInteger()
/* 9.6 */        expectEqual("result.toJsonString()", "123", result.toJsonString(), "123")
/* 9.7 */    }
/* 9.8 */    
/* 9.9 */    @Attribute[TestCase_7]
/* 9.10 */    public func testDecodeValidNegative(): Unit {
/* 9.11 */        let decoder = BencodeDecoder("i-123e".toArray())
/* 9.12 */        let result = decoder.decodeInteger()
/* 9.13 */        expectEqual("result.toJsonString()", "-123", result.toJsonString(), "-123")
/* 9.14 */    }
/* 9.15 */    
/* 9.16 */    @Attribute[TestCase_8]
/* 9.17 */    public func testDecodeInvalidOctal(): Unit {
/* 9.18 */        let decoder = BencodeDecoder("i0123e".toArray())
/* 9.19 */        try {
/* 9.20 */            decoder.decodeInteger()
/* 9.21 */            fail("Expected exception not thrown")
/* 9.22 */        } catch(e: Exception) {
/* 9.23 */            assertEqual("e.message", "Invalid bencoded value: invalid character in integer", e.message, "Invalid bencoded value: invalid character in integer")
/* 9.24 */        }
/* 9.25 */    }
/* 9.26 */    
/* 9.27 */    @Attribute[TestCase_9]
/* 9.28 */    public func testDecodeInvalidNegativeZero(): Unit {
/* 9.29 */        let decoder = BencodeDecoder("i-0123e".toArray())
/* 9.30 */        try {
/* 9.31 */            decoder.decodeInteger()
/* 9.32 */            fail("Expected exception not thrown")
/* 9.33 */        } catch(e: Exception) {
/* 9.34 */            assertEqual("e.message", "Invalid bencoded value: invalid character in integer", e.message, "Invalid bencoded value: invalid character in integer")
/* 9.35 */        }
/* 9.36 */    }
/* 9.37 */    
/* 9.38 */    @Attribute[TestCase_10]
/* 9.39 */    public func testDecodeMissingEnd(): Unit {
/* 9.40 */        let decoder = BencodeDecoder("i123".toArray())
/* 9.41 */        try {
/* 9.42 */            decoder.decodeInteger()
/* 9.43 */            fail("Expected exception not thrown")
/* 9.44 */        } catch(e: Exception) {
/* 9.45 */            assertEqual("e.message", "Invalid bencoded value: Out-of-Bounds Access", e.message, "Invalid bencoded value: Out-of-Bounds Access")
/* 9.46 */        }
/* 9.47 */    }
/* 9.48 */    
/* 9.49 */    @Attribute[TestCase_11]
/* 9.50 */    public func testDecodeMissingIAtStart(): Unit {
/* 9.51 */        let decoder = BencodeDecoder("123e".toArray())
/* 9.52 */        try {
/* 9.53 */            decoder.decodeInteger()
/* 9.54 */            fail("Expected exception not thrown")
/* 9.55 */        } catch(e: Exception) {
/* 9.56 */            assertEqual("e.message", "Invalid bencoded value: missing 'i' at the start", e.message, "Invalid bencoded value: missing 'i' at the start")
/* 9.57 */        }
/* 9.58 */    }
/* 9.59 */    
/* 9.60 */    init() {
/* 9.61 */    }
/* 9.62 */    private func classConfiguration(): Configuration {
/* 9.63 */        let configuration = Configuration()
/* 9.64 */        
/* 9.65 */        return configuration
/* 9.66 */    }
/* 9.67 */    public override func asTestSuite(): TestSuite {
/* 9.68 */        
/* 9.69 */        let suiteConfiguration = classConfiguration()
/* 9.70 */        let suiteBuilder = TestSuite.builder("TestBencodeDecoderInteger").configure(suiteConfiguration)
/* 9.71 */        let m___ = TimeNow()
/* 9.72 */        suiteConfiguration.set < Measurement >("measurement", m___)
/* 9.73 */        
/* 9.74 */        { => let caseConfig = Configuration()
/* 9.75 */            
/* 9.76 */            let testDecodeValidIntegerTestFunc = { => testDecodeValidInteger();() }
/* 9.77 */            suiteBuilder.add(
/* 9.78 */            UnitTestCase.create(
/* 9.79 */            "testDecodeValidInteger",
/* 9.80 */            configuration: caseConfig,
/* 9.81 */            body: testDecodeValidIntegerTestFunc
/* 9.82 */            )
/* 9.83 */            )
/* 9.84 */            
/* 9.85 */        }()
/* 9.86 */        
/* 9.87 */        
/* 9.88 */        { => let caseConfig = Configuration()
/* 9.89 */            
/* 9.90 */            let testDecodeValidNegativeTestFunc = { => testDecodeValidNegative();() }
/* 9.91 */            suiteBuilder.add(
/* 9.92 */            UnitTestCase.create(
/* 9.93 */            "testDecodeValidNegative",
/* 9.94 */            configuration: caseConfig,
/* 9.95 */            body: testDecodeValidNegativeTestFunc
/* 9.96 */            )
/* 9.97 */            )
/* 9.98 */            
/* 9.99 */        }()
/* 9.100 */        
/* 9.101 */        
/* 9.102 */        { => let caseConfig = Configuration()
/* 9.103 */            
/* 9.104 */            let testDecodeInvalidOctalTestFunc = { => testDecodeInvalidOctal();() }
/* 9.105 */            suiteBuilder.add(
/* 9.106 */            UnitTestCase.create(
/* 9.107 */            "testDecodeInvalidOctal",
/* 9.108 */            configuration: caseConfig,
/* 9.109 */            body: testDecodeInvalidOctalTestFunc
/* 9.110 */            )
/* 9.111 */            )
/* 9.112 */            
/* 9.113 */        }()
/* 9.114 */        
/* 9.115 */        
/* 9.116 */        { => let caseConfig = Configuration()
/* 9.117 */            
/* 9.118 */            let testDecodeInvalidNegativeZeroTestFunc = { => testDecodeInvalidNegativeZero();() }
/* 9.119 */            suiteBuilder.add(
/* 9.120 */            UnitTestCase.create(
/* 9.121 */            "testDecodeInvalidNegativeZero",
/* 9.122 */            configuration: caseConfig,
/* 9.123 */            body: testDecodeInvalidNegativeZeroTestFunc
/* 9.124 */            )
/* 9.125 */            )
/* 9.126 */            
/* 9.127 */        }()
/* 9.128 */        
/* 9.129 */        
/* 9.130 */        { => let caseConfig = Configuration()
/* 9.131 */            
/* 9.132 */            let testDecodeMissingEndTestFunc = { => testDecodeMissingEnd();() }
/* 9.133 */            suiteBuilder.add(
/* 9.134 */            UnitTestCase.create(
/* 9.135 */            "testDecodeMissingEnd",
/* 9.136 */            configuration: caseConfig,
/* 9.137 */            body: testDecodeMissingEndTestFunc
/* 9.138 */            )
/* 9.139 */            )
/* 9.140 */            
/* 9.141 */        }()
/* 9.142 */        
/* 9.143 */        
/* 9.144 */        { => let caseConfig = Configuration()
/* 9.145 */            
/* 9.146 */            let testDecodeMissingIAtStartTestFunc = { => testDecodeMissingIAtStart();() }
/* 9.147 */            suiteBuilder.add(
/* 9.148 */            UnitTestCase.create(
/* 9.149 */            "testDecodeMissingIAtStart",
/* 9.150 */            configuration: caseConfig,
/* 9.151 */            body: testDecodeMissingIAtStartTestFunc
/* 9.152 */            )
/* 9.153 */            )
/* 9.154 */            
/* 9.155 */        }()
/* 9.156 */        
/* 9.157 */        return suiteBuilder.build()
/* 9.158 */    }
/* 9.159 */}
/* 9.160 */
/* 9.161 */
/* 9.162 */extend TestPackage {
/* 9.163 */    @Attribute[TEST_REGISTER]
/* 9.164 */    func registerTestBencodeDecoderInteger() {
/* 9.165 */        registerSuite({ => TestBencodeDecoderInteger().asTestSuite() })
/* 9.166 */    }
/* 9.167 */}
/* 9.168 */
/* ===== End of the Emit ===== */


/* ===== Emitted by MacroCall @Test in bencode_decoder_test.cj:78:1 ===== */
/* 78.1 */@Attribute[TEST_GENERATED] class BencodeDecoderStringTests <: TestClass {
/* 78.2 */    @Attribute[TestCase_12]
/* 78.3 */    public func testDecodeValidString(): Unit {
/* 78.4 */        let decoder = BencodeDecoder("4:spam".toArray())
/* 78.5 */        let result = decoder.decodeString()
/* 78.6 */        let expected = JsonString("spam")
/* 78.7 */        expectEqual("result.toJsonString()", "expected.toJsonString()", result.toJsonString(), expected.toJsonString())
/* 78.8 */    }
/* 78.9 */    
/* 78.10 */    @Attribute[TestCase_13]
/* 78.11 */    public func testDecodeEmptyString(): Unit {
/* 78.12 */        let decoder = BencodeDecoder("0:".toArray())
/* 78.13 */        let result = decoder.decodeString()
/* 78.14 */        let expected = JsonString("")
/* 78.15 */        expectEqual("result.toJsonString()", "expected.toJsonString()", result.toJsonString(), expected.toJsonString())
/* 78.16 */    }
/* 78.17 */    
/* 78.18 */    @Attribute[TestCase_14]
/* 78.19 */    public func testDecodeInvalidStringMissingColon(): Unit {
/* 78.20 */        let decoder = BencodeDecoder("4spam".toArray())
/* 78.21 */        try {
/* 78.22 */            decoder.decodeString()
/* 78.23 */            fail("Expected exception not thrown")
/* 78.24 */        } catch(e: Exception) {
/* 78.25 */            assertEqual("e.message", "Invalid bencoded value: invalid character in string length", e.message, "Invalid bencoded value: invalid character in string length")
/* 78.26 */        }
/* 78.27 */    }
/* 78.28 */    
/* 78.29 */    @Attribute[TestCase_15]
/* 78.30 */    public func testDecodeInvalidStringLengthExceedsData(): Unit {
/* 78.31 */        let decoder = BencodeDecoder("5:spam".toArray())
/* 78.32 */        try {
/* 78.33 */            decoder.decodeString()
/* 78.34 */            fail("Expected exception not thrown")
/* 78.35 */        } catch(e: Exception) {
/* 78.36 */            assertEqual("e.message", "Invalid bencoded value: Out-of-Bounds Access", e.message, "Invalid bencoded value: Out-of-Bounds Access")
/* 78.37 */        }
/* 78.38 */    }
/* 78.39 */    
/* 78.40 */    @Attribute[TestCase_16]
/* 78.41 */    public func testDecodeInvalidStringLengthLessThanZero(): Unit {
/* 78.42 */        let decoder = BencodeDecoder("-5:spam".toArray())
/* 78.43 */        try {
/* 78.44 */            decoder.decodeString()
/* 78.45 */            fail("Expected exception not thrown")
/* 78.46 */        } catch(e: Exception) {
/* 78.47 */            assertEqual("e.message", "Invalid bencoded value: missing positive number at the start", e.message, "Invalid bencoded value: missing positive number at the start")
/* 78.48 */        }
/* 78.49 */    }
/* 78.50 */    
/* 78.51 */    @Attribute[TestCase_17]
/* 78.52 */    public func testDecodeInvalidStringInvalidLength(): Unit {
/* 78.53 */        let decoder = BencodeDecoder("a:spam".toArray())
/* 78.54 */        try {
/* 78.55 */            decoder.decodeString()
/* 78.56 */            fail("Expected exception not thrown")
/* 78.57 */        } catch(e: Exception) {
/* 78.58 */            assertEqual("e.message", "Invalid bencoded value: missing positive number at the start", e.message, "Invalid bencoded value: missing positive number at the start")
/* 78.59 */        }
/* 78.60 */    }
/* 78.61 */    
/* 78.62 */    @Attribute[TestCase_18]
/* 78.63 */    public func testDecodeInvalidStringLengthCannotParse(): Unit {
/* 78.64 */        let decoder = BencodeDecoder("1a:spam".toArray())
/* 78.65 */        try {
/* 78.66 */            decoder.decodeString()
/* 78.67 */            fail("Expected exception not thrown")
/* 78.68 */        } catch(e: Exception) {
/* 78.69 */            assertEqual("e.message", "Invalid bencoded value: invalid character in string length", e.message, "Invalid bencoded value: invalid character in string length")
/* 78.70 */        }
/* 78.71 */    }
/* 78.72 */    
/* 78.73 */    init() {
/* 78.74 */    }
/* 78.75 */    private func classConfiguration(): Configuration {
/* 78.76 */        let configuration = Configuration()
/* 78.77 */        
/* 78.78 */        return configuration
/* 78.79 */    }
/* 78.80 */    public override func asTestSuite(): TestSuite {
/* 78.81 */        
/* 78.82 */        let suiteConfiguration = classConfiguration()
/* 78.83 */        let suiteBuilder = TestSuite.builder("BencodeDecoderStringTests").configure(suiteConfiguration)
/* 78.84 */        let m___ = TimeNow()
/* 78.85 */        suiteConfiguration.set < Measurement >("measurement", m___)
/* 78.86 */        
/* 78.87 */        { => let caseConfig = Configuration()
/* 78.88 */            
/* 78.89 */            let testDecodeValidStringTestFunc = { => testDecodeValidString();() }
/* 78.90 */            suiteBuilder.add(
/* 78.91 */            UnitTestCase.create(
/* 78.92 */            "testDecodeValidString",
/* 78.93 */            configuration: caseConfig,
/* 78.94 */            body: testDecodeValidStringTestFunc
/* 78.95 */            )
/* 78.96 */            )
/* 78.97 */            
/* 78.98 */        }()
/* 78.99 */        
/* 78.100 */        
/* 78.101 */        { => let caseConfig = Configuration()
/* 78.102 */            
/* 78.103 */            let testDecodeEmptyStringTestFunc = { => testDecodeEmptyString();() }
/* 78.104 */            suiteBuilder.add(
/* 78.105 */            UnitTestCase.create(
/* 78.106 */            "testDecodeEmptyString",
/* 78.107 */            configuration: caseConfig,
/* 78.108 */            body: testDecodeEmptyStringTestFunc
/* 78.109 */            )
/* 78.110 */            )
/* 78.111 */            
/* 78.112 */        }()
/* 78.113 */        
/* 78.114 */        
/* 78.115 */        { => let caseConfig = Configuration()
/* 78.116 */            
/* 78.117 */            let testDecodeInvalidStringMissingColonTestFunc = { => testDecodeInvalidStringMissingColon();() }
/* 78.118 */            suiteBuilder.add(
/* 78.119 */            UnitTestCase.create(
/* 78.120 */            "testDecodeInvalidStringMissingColon",
/* 78.121 */            configuration: caseConfig,
/* 78.122 */            body: testDecodeInvalidStringMissingColonTestFunc
/* 78.123 */            )
/* 78.124 */            )
/* 78.125 */            
/* 78.126 */        }()
/* 78.127 */        
/* 78.128 */        
/* 78.129 */        { => let caseConfig = Configuration()
/* 78.130 */            
/* 78.131 */            let testDecodeInvalidStringLengthExceedsDataTestFunc = { => testDecodeInvalidStringLengthExceedsData();() }
/* 78.132 */            suiteBuilder.add(
/* 78.133 */            UnitTestCase.create(
/* 78.134 */            "testDecodeInvalidStringLengthExceedsData",
/* 78.135 */            configuration: caseConfig,
/* 78.136 */            body: testDecodeInvalidStringLengthExceedsDataTestFunc
/* 78.137 */            )
/* 78.138 */            )
/* 78.139 */            
/* 78.140 */        }()
/* 78.141 */        
/* 78.142 */        
/* 78.143 */        { => let caseConfig = Configuration()
/* 78.144 */            
/* 78.145 */            let testDecodeInvalidStringLengthLessThanZeroTestFunc = { => testDecodeInvalidStringLengthLessThanZero();() }
/* 78.146 */            suiteBuilder.add(
/* 78.147 */            UnitTestCase.create(
/* 78.148 */            "testDecodeInvalidStringLengthLessThanZero",
/* 78.149 */            configuration: caseConfig,
/* 78.150 */            body: testDecodeInvalidStringLengthLessThanZeroTestFunc
/* 78.151 */            )
/* 78.152 */            )
/* 78.153 */            
/* 78.154 */        }()
/* 78.155 */        
/* 78.156 */        
/* 78.157 */        { => let caseConfig = Configuration()
/* 78.158 */            
/* 78.159 */            let testDecodeInvalidStringInvalidLengthTestFunc = { => testDecodeInvalidStringInvalidLength();() }
/* 78.160 */            suiteBuilder.add(
/* 78.161 */            UnitTestCase.create(
/* 78.162 */            "testDecodeInvalidStringInvalidLength",
/* 78.163 */            configuration: caseConfig,
/* 78.164 */            body: testDecodeInvalidStringInvalidLengthTestFunc
/* 78.165 */            )
/* 78.166 */            )
/* 78.167 */            
/* 78.168 */        }()
/* 78.169 */        
/* 78.170 */        
/* 78.171 */        { => let caseConfig = Configuration()
/* 78.172 */            
/* 78.173 */            let testDecodeInvalidStringLengthCannotParseTestFunc = { => testDecodeInvalidStringLengthCannotParse();() }
/* 78.174 */            suiteBuilder.add(
/* 78.175 */            UnitTestCase.create(
/* 78.176 */            "testDecodeInvalidStringLengthCannotParse",
/* 78.177 */            configuration: caseConfig,
/* 78.178 */            body: testDecodeInvalidStringLengthCannotParseTestFunc
/* 78.179 */            )
/* 78.180 */            )
/* 78.181 */            
/* 78.182 */        }()
/* 78.183 */        
/* 78.184 */        return suiteBuilder.build()
/* 78.185 */    }
/* 78.186 */}
/* 78.187 */
/* 78.188 */
/* 78.189 */extend TestPackage {
/* 78.190 */    @Attribute[TEST_REGISTER]
/* 78.191 */    func registerBencodeDecoderStringTests() {
/* 78.192 */        registerSuite({ => BencodeDecoderStringTests().asTestSuite() })
/* 78.193 */    }
/* 78.194 */}
/* 78.195 */
/* ===== End of the Emit ===== */

/* ===== Emitted by MacroCall @Test in bencode_decoder_test.cj:161:1 ===== */
/* 161.1 */@Attribute[TEST_GENERATED] class BencodeDecoderListTests <: TestClass {
/* 161.2 */    @Attribute[TestCase_19]
/* 161.3 */    public func testDecodeEmptyList(): Unit {
/* 161.4 */        let decoder = BencodeDecoder("le".toArray())
/* 161.5 */        let result = decoder.decodeList()
/* 161.6 */        expectEqual("result.toJsonString().trimAscii()", "[]", result.toJsonString().trimAscii(), "[]")
/* 161.7 */    }
/* 161.8 */    
/* 161.9 */    @Attribute[TestCase_20]
/* 161.10 */    public func testDecodeIntegerList(): Unit {
/* 161.11 */        let decoder = BencodeDecoder("li1ei2ei3ee".toArray())
/* 161.12 */        let result = decoder.decodeList()
/* 161.13 */        let expected = JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)])
/* 161.14 */        expectEqual("result.toJsonString().trimAscii()", "expected.toJsonString().trimAscii()", result.toJsonString().trimAscii(), expected.toJsonString().trimAscii())
/* 161.15 */    }
/* 161.16 */    
/* 161.17 */    @Attribute[TestCase_21]
/* 161.18 */    public func testDecodeStringList(): Unit {
/* 161.19 */        let decoder = BencodeDecoder("l4:spam4:eggse".toArray())
/* 161.20 */        let result = decoder.decodeList()
/* 161.21 */        let expected = JsonArray([JsonString("spam"), JsonString("eggs")])
/* 161.22 */        expectEqual("result.toJsonString()", "expected.toJsonString()", result.toJsonString(), expected.toJsonString())
/* 161.23 */    }
/* 161.24 */    
/* 161.25 */    @Attribute[TestCase_22]
/* 161.26 */    public func testDecodeNestedList(): Unit {
/* 161.27 */        let decoder = BencodeDecoder("lli1ei2eel4:spam4:eggsee".toArray())
/* 161.28 */        let result = decoder.decodeList()
/* 161.29 */        expectEqual("result.toString().trimAscii()", "[[1,2],[\"spam\",\"eggs\"]]", result.toString().trimAscii(), "[[1,2],[\"spam\",\"eggs\"]]")
/* 161.30 */    }
/* 161.31 */    
/* 161.32 */    @Attribute[TestCase_23]
/* 161.33 */    public func testDecodeInvalidListMissingEnd(): Unit {
/* 161.34 */        let decoder = BencodeDecoder("li1ei2ei3e".toArray())
/* 161.35 */        try {
/* 161.36 */            decoder.decodeList()
/* 161.37 */            fail("Expected exception not thrown")
/* 161.38 */        } catch(e: Exception) {
/* 161.39 */            assertEqual("e.message", "Invalid bencoded value: missing 'e' at the end", e.message, "Invalid bencoded value: missing 'e' at the end")
/* 161.40 */        }
/* 161.41 */    }
/* 161.42 */    
/* 161.43 */    @Attribute[TestCase_24]
/* 161.44 */    public func testDecodeInvalidListMissingLAtStart(): Unit {
/* 161.45 */        let decoder = BencodeDecoder("i1ei2ei3ee".toArray())
/* 161.46 */        try {
/* 161.47 */            decoder.decodeList()
/* 161.48 */            fail("Expected exception not thrown")
/* 161.49 */        } catch(e: Exception) {
/* 161.50 */            assertEqual("e.message", "Invalid bencoded value: missing 'l' at the start", e.message, "Invalid bencoded value: missing 'l' at the start")
/* 161.51 */        }
/* 161.52 */    }
/* 161.53 */    
/* 161.54 */    init() {
/* 161.55 */    }
/* 161.56 */    private func classConfiguration(): Configuration {
/* 161.57 */        let configuration = Configuration()
/* 161.58 */        
/* 161.59 */        return configuration
/* 161.60 */    }
/* 161.61 */    public override func asTestSuite(): TestSuite {
/* 161.62 */        
/* 161.63 */        let suiteConfiguration = classConfiguration()
/* 161.64 */        let suiteBuilder = TestSuite.builder("BencodeDecoderListTests").configure(suiteConfiguration)
/* 161.65 */        let m___ = TimeNow()
/* 161.66 */        suiteConfiguration.set < Measurement >("measurement", m___)
/* 161.67 */        
/* 161.68 */        { => let caseConfig = Configuration()
/* 161.69 */            
/* 161.70 */            let testDecodeEmptyListTestFunc = { => testDecodeEmptyList();() }
/* 161.71 */            suiteBuilder.add(
/* 161.72 */            UnitTestCase.create(
/* 161.73 */            "testDecodeEmptyList",
/* 161.74 */            configuration: caseConfig,
/* 161.75 */            body: testDecodeEmptyListTestFunc
/* 161.76 */            )
/* 161.77 */            )
/* 161.78 */            
/* 161.79 */        }()
/* 161.80 */        
/* 161.81 */        
/* 161.82 */        { => let caseConfig = Configuration()
/* 161.83 */            
/* 161.84 */            let testDecodeIntegerListTestFunc = { => testDecodeIntegerList();() }
/* 161.85 */            suiteBuilder.add(
/* 161.86 */            UnitTestCase.create(
/* 161.87 */            "testDecodeIntegerList",
/* 161.88 */            configuration: caseConfig,
/* 161.89 */            body: testDecodeIntegerListTestFunc
/* 161.90 */            )
/* 161.91 */            )
/* 161.92 */            
/* 161.93 */        }()
/* 161.94 */        
/* 161.95 */        
/* 161.96 */        { => let caseConfig = Configuration()
/* 161.97 */            
/* 161.98 */            let testDecodeStringListTestFunc = { => testDecodeStringList();() }
/* 161.99 */            suiteBuilder.add(
/* 161.100 */            UnitTestCase.create(
/* 161.101 */            "testDecodeStringList",
/* 161.102 */            configuration: caseConfig,
/* 161.103 */            body: testDecodeStringListTestFunc
/* 161.104 */            )
/* 161.105 */            )
/* 161.106 */            
/* 161.107 */        }()
/* 161.108 */        
/* 161.109 */        
/* 161.110 */        { => let caseConfig = Configuration()
/* 161.111 */            
/* 161.112 */            let testDecodeNestedListTestFunc = { => testDecodeNestedList();() }
/* 161.113 */            suiteBuilder.add(
/* 161.114 */            UnitTestCase.create(
/* 161.115 */            "testDecodeNestedList",
/* 161.116 */            configuration: caseConfig,
/* 161.117 */            body: testDecodeNestedListTestFunc
/* 161.118 */            )
/* 161.119 */            )
/* 161.120 */            
/* 161.121 */        }()
/* 161.122 */        
/* 161.123 */        
/* 161.124 */        { => let caseConfig = Configuration()
/* 161.125 */            
/* 161.126 */            let testDecodeInvalidListMissingEndTestFunc = { => testDecodeInvalidListMissingEnd();() }
/* 161.127 */            suiteBuilder.add(
/* 161.128 */            UnitTestCase.create(
/* 161.129 */            "testDecodeInvalidListMissingEnd",
/* 161.130 */            configuration: caseConfig,
/* 161.131 */            body: testDecodeInvalidListMissingEndTestFunc
/* 161.132 */            )
/* 161.133 */            )
/* 161.134 */            
/* 161.135 */        }()
/* 161.136 */        
/* 161.137 */        
/* 161.138 */        { => let caseConfig = Configuration()
/* 161.139 */            
/* 161.140 */            let testDecodeInvalidListMissingLAtStartTestFunc = { => testDecodeInvalidListMissingLAtStart();() }
/* 161.141 */            suiteBuilder.add(
/* 161.142 */            UnitTestCase.create(
/* 161.143 */            "testDecodeInvalidListMissingLAtStart",
/* 161.144 */            configuration: caseConfig,
/* 161.145 */            body: testDecodeInvalidListMissingLAtStartTestFunc
/* 161.146 */            )
/* 161.147 */            )
/* 161.148 */            
/* 161.149 */        }()
/* 161.150 */        
/* 161.151 */        return suiteBuilder.build()
/* 161.152 */    }
/* 161.153 */}
/* 161.154 */
/* 161.155 */
/* 161.156 */extend TestPackage {
/* 161.157 */    @Attribute[TEST_REGISTER]
/* 161.158 */    func registerBencodeDecoderListTests() {
/* 161.159 */        registerSuite({ => BencodeDecoderListTests().asTestSuite() })
/* 161.160 */    }
/* 161.161 */}
/* 161.162 */
/* ===== End of the Emit ===== */

/* ===== Emitted by MacroCall @Test in bencode_decoder_test.cj:223:1 ===== */
/* 223.1 */@Attribute[TEST_GENERATED] class BencodeDecoderDictTests <: TestClass {
/* 223.2 */    @Attribute[TestCase_25]
/* 223.3 */    public func testDecodeEmptyDict(): Unit {
/* 223.4 */        let decoder = BencodeDecoder("de".toArray())
/* 223.5 */        let result = decoder.decodeDict()
/* 223.6 */        expectEqual("result.toJsonString()", "{}", result.toJsonString(), "{}")
/* 223.7 */    }
/* 223.8 */    
/* 223.9 */    @Attribute[TestCase_26]
/* 223.10 */    public func testDecodeSimpleDict(): Unit {
/* 223.11 */        let decoder = BencodeDecoder("d3:bar4:spam3:fooi42ee".toArray())
/* 223.12 */        let result = decoder.decodeDict()
/* 223.13 */        let expected = JsonValue.fromStr("{\"bar\": \"spam\", \"foo\": 42}")
/* 223.14 */        expectEqual("result.toJsonString()", "expected.toJsonString()", result.toJsonString(), expected.toJsonString())
/* 223.15 */    }
/* 223.16 */    
/* 223.17 */    @Attribute[TestCase_27]
/* 223.18 */    public func testDecodeNestedDict(): Unit {
/* 223.19 */        let decoder = BencodeDecoder("d3:bar4:spam3:food3:bari42eee".toArray())
/* 223.20 */        let result = decoder.decodeDict()
/* 223.21 */        let expected = JsonValue.fromStr("{\"bar\": \"spam\", \"foo\": {\"bar\": 42}}")
/* 223.22 */        expectEqual("result.toJsonString()", "expected.toJsonString()", result.toJsonString(), expected.toJsonString())
/* 223.23 */    }
/* 223.24 */    
/* 223.25 */    @Attribute[TestCase_28]
/* 223.26 */    public func testDecodeInvalidDictMissingEnd(): Unit {
/* 223.27 */        let decoder = BencodeDecoder("d3:bar4:spam3:fooi42e".toArray())
/* 223.28 */        try {
/* 223.29 */            decoder.decodeDict()
/* 223.30 */            fail("Expected exception not thrown")
/* 223.31 */        } catch(e: Exception) {
/* 223.32 */            assertEqual("e.message", "Invalid bencoded value: missing 'e' at the end", e.message, "Invalid bencoded value: missing 'e' at the end")
/* 223.33 */        }
/* 223.34 */    }
/* 223.35 */    
/* 223.36 */    @Attribute[TestCase_29]
/* 223.37 */    public func testDecodeInvalidDictMissingDAtStart(): Unit {
/* 223.38 */        let decoder = BencodeDecoder("3:bar4:spam3:fooi42ee".toArray())
/* 223.39 */        try {
/* 223.40 */            decoder.decodeDict()
/* 223.41 */            fail("Expected exception not thrown")
/* 223.42 */        } catch(e: Exception) {
/* 223.43 */            assertEqual("e.message", "Invalid bencoded value: missing 'd' at the start", e.message, "Invalid bencoded value: missing 'd' at the start")
/* 223.44 */        }
/* 223.45 */    }
/* 223.46 */    
/* 223.47 */    init() {
/* 223.48 */    }
/* 223.49 */    private func classConfiguration(): Configuration {
/* 223.50 */        let configuration = Configuration()
/* 223.51 */        
/* 223.52 */        return configuration
/* 223.53 */    }
/* 223.54 */    public override func asTestSuite(): TestSuite {
/* 223.55 */        
/* 223.56 */        let suiteConfiguration = classConfiguration()
/* 223.57 */        let suiteBuilder = TestSuite.builder("BencodeDecoderDictTests").configure(suiteConfiguration)
/* 223.58 */        let m___ = TimeNow()
/* 223.59 */        suiteConfiguration.set < Measurement >("measurement", m___)
/* 223.60 */        
/* 223.61 */        { => let caseConfig = Configuration()
/* 223.62 */            
/* 223.63 */            let testDecodeEmptyDictTestFunc = { => testDecodeEmptyDict();() }
/* 223.64 */            suiteBuilder.add(
/* 223.65 */            UnitTestCase.create(
/* 223.66 */            "testDecodeEmptyDict",
/* 223.67 */            configuration: caseConfig,
/* 223.68 */            body: testDecodeEmptyDictTestFunc
/* 223.69 */            )
/* 223.70 */            )
/* 223.71 */            
/* 223.72 */        }()
/* 223.73 */        
/* 223.74 */        
/* 223.75 */        { => let caseConfig = Configuration()
/* 223.76 */            
/* 223.77 */            let testDecodeSimpleDictTestFunc = { => testDecodeSimpleDict();() }
/* 223.78 */            suiteBuilder.add(
/* 223.79 */            UnitTestCase.create(
/* 223.80 */            "testDecodeSimpleDict",
/* 223.81 */            configuration: caseConfig,
/* 223.82 */            body: testDecodeSimpleDictTestFunc
/* 223.83 */            )
/* 223.84 */            )
/* 223.85 */            
/* 223.86 */        }()
/* 223.87 */        
/* 223.88 */        
/* 223.89 */        { => let caseConfig = Configuration()
/* 223.90 */            
/* 223.91 */            let testDecodeNestedDictTestFunc = { => testDecodeNestedDict();() }
/* 223.92 */            suiteBuilder.add(
/* 223.93 */            UnitTestCase.create(
/* 223.94 */            "testDecodeNestedDict",
/* 223.95 */            configuration: caseConfig,
/* 223.96 */            body: testDecodeNestedDictTestFunc
/* 223.97 */            )
/* 223.98 */            )
/* 223.99 */            
/* 223.100 */        }()
/* 223.101 */        
/* 223.102 */        
/* 223.103 */        { => let caseConfig = Configuration()
/* 223.104 */            
/* 223.105 */            let testDecodeInvalidDictMissingEndTestFunc = { => testDecodeInvalidDictMissingEnd();() }
/* 223.106 */            suiteBuilder.add(
/* 223.107 */            UnitTestCase.create(
/* 223.108 */            "testDecodeInvalidDictMissingEnd",
/* 223.109 */            configuration: caseConfig,
/* 223.110 */            body: testDecodeInvalidDictMissingEndTestFunc
/* 223.111 */            )
/* 223.112 */            )
/* 223.113 */            
/* 223.114 */        }()
/* 223.115 */        
/* 223.116 */        
/* 223.117 */        { => let caseConfig = Configuration()
/* 223.118 */            
/* 223.119 */            let testDecodeInvalidDictMissingDAtStartTestFunc = { => testDecodeInvalidDictMissingDAtStart();() }
/* 223.120 */            suiteBuilder.add(
/* 223.121 */            UnitTestCase.create(
/* 223.122 */            "testDecodeInvalidDictMissingDAtStart",
/* 223.123 */            configuration: caseConfig,
/* 223.124 */            body: testDecodeInvalidDictMissingDAtStartTestFunc
/* 223.125 */            )
/* 223.126 */            )
/* 223.127 */            
/* 223.128 */        }()
/* 223.129 */        
/* 223.130 */        return suiteBuilder.build()
/* 223.131 */    }
/* 223.132 */}
/* 223.133 */
/* 223.134 */
/* 223.135 */extend TestPackage {
/* 223.136 */    @Attribute[TEST_REGISTER]
/* 223.137 */    func registerBencodeDecoderDictTests() {
/* 223.138 */        registerSuite({ => BencodeDecoderDictTests().asTestSuite() })
/* 223.139 */    }
/* 223.140 */}
/* 223.141 */
/* ===== End of the Emit ===== */